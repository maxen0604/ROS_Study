#!/usr/bin/env python
PACKAGE = "chapter2_tutorials"
from dynamic_reconfigure.parameter_generator_catkin import *
gen = ParameterGenerator()
# 以上代码初始化ROS并导入参数生成器


gen.add("int_param",    int_t,    0, "An Integer parameter", 1,  0, 100)
gen.add("double_param", double_t, 0, "A double parameter",    .1, 0,   1)
gen.add("str_param",    str_t,    0, "A string parameter",  "Chapter2_dynamic_reconfigure")
gen.add("bool_param",   bool_t,   0, "A Boolean parameter",  True)
'''
 以上代码为加入不同的参数。其中gen.add(...)格式如下：
 gen.add(name, type, level, description, default, min, max)
 name: 参数的名称
 type: 参数类型
 level:一个传递给回调的位掩码
 description: 一个描述参数
 default: 节点启动的初始值
 min: 参数最小值
 max: 参数最大值
'''

size_enum = gen.enum([ gen.const("Low",      int_t, 0, "Low is 0"),
                       gen.const("Medium",     int_t, 1, "Medium is 1"),
                       gen.const("High",      int_t, 2, "Hight is 2")],
                     "Select from the list")

gen.add("size", int_t, 0, "Select from the list", 1, 0, 3, edit_method=size_enum)
'''
可以使用如上方法生成一个枚举类型的值
这里定义了一个int_t类型得到参数“size”，该参数的值可以通过一个枚举列出来。枚举的定义使用enum方法进行定义，
其中使用const方法定义每一个枚举值的名称、类型、值、描述字符串。
'''
exit(gen.generate(PACKAGE, "text2_tutorials", "text2_"))
'''
最后一行代码用于生成所有C++和Python相关的文件并且退出程序，
这里第二个参数表示动态参数运行的节点名，
第三个参数是生成文件所使用的前缀，
需要和配置文件名相同。'''
